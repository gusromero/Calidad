// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UnitTestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uIItemEdit = this.UIMainWindowWindow.UIItemEdit;
            WpfButton uIIniciarButton = this.UIMainWindowWindow.UIIniciarButton;
            WinWindow uIMainWindowWindow1 = this.UIMainWindowWindow1;
            #endregion

            // Launch 'E:\Training\DotNetSpain 2015\Calidad\BuscaminasWPF\MinesweeperWPF\bin\Debug\MinesweeperWPF.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIMainWindowWindowExePath, this.RecordedMethod1Params.UIMainWindowWindowAlternateExePath);

            // Type '1' in text box
            uIItemEdit.Text = this.RecordedMethod1Params.UIItemEditText;

            // Click 'Iniciar' button
            Mouse.Click(uIIniciarButton, new Point(15, 4));

            // Click 'MainWindow' window
            Mouse.Click(uIMainWindowWindow1, new Point(227, 159));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinText uIJuegoterminadoTuGanaText = this.UIJuegoterminadoTuGanaWindow.UIJuegoterminadoTuGanaText;
            #endregion

            // Verify that the 'ControlType' property of 'Juego terminado. Tu Ganas' label equals 'Juego terminado. Tu Ganas'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIJuegoterminadoTuGanaTextControlType, uIJuegoterminadoTuGanaText.ControlType.ToString());
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WpfButton uICloseButton = this.UIMainWindowWindow.UIMainWindowTitleBar.UICloseButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(31, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 8));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        
        public UIJuegoterminadoTuGanaWindow UIJuegoterminadoTuGanaWindow
        {
            get
            {
                if ((this.mUIJuegoterminadoTuGanaWindow == null))
                {
                    this.mUIJuegoterminadoTuGanaWindow = new UIJuegoterminadoTuGanaWindow();
                }
                return this.mUIJuegoterminadoTuGanaWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        
        private UIJuegoterminadoTuGanaWindow mUIJuegoterminadoTuGanaWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch 'E:\Training\DotNetSpain 2015\Calidad\BuscaminasWPF\MinesweeperWPF\bin\Debug\MinesweeperWPF.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "E:\\Training\\DotNetSpain 2015\\Calidad\\BuscaminasWPF\\MinesweeperWPF\\bin\\Debug\\Mines" +
            "weeperWPF.exe";
        
        /// <summary>
        /// Launch 'E:\Training\DotNetSpain 2015\Calidad\BuscaminasWPF\MinesweeperWPF\bin\Debug\MinesweeperWPF.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "E:\\Training\\DotNetSpain 2015\\Calidad\\BuscaminasWPF\\MinesweeperWPF\\bin\\Debug\\Mines" +
            "weeperWPF.exe";
        
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string UIItemEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Juego terminado. Tu Ganas' label equals 'Juego terminado. Tu Ganas'
        /// </summary>
        public string UIJuegoterminadoTuGanaTextControlType = "Text";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WpfButton UIIniciarButton
        {
            get
            {
                if ((this.mUIIniciarButton == null))
                {
                    this.mUIIniciarButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIIniciarButton.SearchProperties[WpfButton.PropertyNames.Name] = "Iniciar";
                    this.mUIIniciarButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIIniciarButton;
            }
        }
        
        public UIMainWindowTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new UIMainWindowTitleBar(this);
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        
        private WpfButton mUIIniciarButton;
        
        private UIMainWindowTitleBar mUIMainWindowTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMainWindowTitleBar : WpfTitleBar
    {
        
        public UIMainWindowTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIJuegoterminadoTuGanaWindow : WinWindow
    {
        
        public UIJuegoterminadoTuGanaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Text";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Juego terminado. Tu Ganas");
            #endregion
        }
        
        #region Properties
        public WinText UIJuegoterminadoTuGanaText
        {
            get
            {
                if ((this.mUIJuegoterminadoTuGanaText == null))
                {
                    this.mUIJuegoterminadoTuGanaText = new WinText(this);
                    #region Search Criteria
                    this.mUIJuegoterminadoTuGanaText.SearchProperties[WinText.PropertyNames.Name] = "Text";
                    this.mUIJuegoterminadoTuGanaText.WindowTitles.Add("Text");
                    #endregion
                }
                return this.mUIJuegoterminadoTuGanaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIJuegoterminadoTuGanaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
